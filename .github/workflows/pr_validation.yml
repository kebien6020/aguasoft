name: PR validation

on:
  pull_request:
    branches: [ "master" ]

env:
  node-version: 24.x

jobs:
  build-client:
    runs-on: ubuntu-latest
    env:
      TZ: America/Bogota
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ env.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.node-version }}
    - run: cd client && npm ci && npm run build

  build-server:
    runs-on: ubuntu-latest
    env:
      TZ: America/Bogota
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ env.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.node-version }}
    - run: cd server && npm ci && npm run build

  check-client:
    runs-on: ubuntu-latest
    env:
      TZ: America/Bogota
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ env.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.node-version }}
    - run: cd client && npm ci && npm run typecheck && npm run lint

  check-server:
    runs-on: ubuntu-latest
    env:
      TZ: America/Bogota
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ env.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.node-version }}
    - run: cd server && npm ci && npm run typecheck && npm run lint

  test-server:
    runs-on: ubuntu-latest
    env:
      TZ: America/Bogota
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ env.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.node-version }}

    - run: cd server && npm ci
    - run: cd server && npm run test:junit
    - run: cd server && npx junit-to-ctrf ./test-report.xml

    - name: Publish Test Report
      uses: ctrf-io/github-test-reporter@v1
      with:
        report-path: './server/ctrf/*.json'
      if: always()

  check-version-bump:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Check version bump
      run: .github/check_version_bump.sh
  
  publish-images:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        tags: |
          type=ref,event=pr

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker images
      run: |
        cat <<'EOF' > tags.json
        {
          "target": {
            "aguasoft": {
              "tags": [ "ghcr.io/${{ github.actor }}/aguasoft:${{ steps.meta.outputs.tags }}" ]
            },
            "nginx": {
              "tags": [ "ghcr.io/${{ github.actor }}/nginx:${{ steps.meta.outputs.tags }}" ]
            },
            "certbot": {
              "tags": [ "ghcr.io/${{ github.actor }}/certbot-dns-digitalocean:${{ steps.meta.outputs.tags }}" ]
            }
          }
        }
        EOF
        docker buildx bake -f docker-compose.prod.yml --file tags.json --push
